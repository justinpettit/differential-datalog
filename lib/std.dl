/* Description: DDlog "standard library" automatically imported into every module */

extern type Vec<'A>

/*
 * Option
 */

typedef Option<'A> = Some{x: 'A}
                   | None

function is_none(x: Option<'A>): bool = {
    match (x) {
        None -> true,
        _    -> false
    }
}

function is_some(x: Option<'A>): bool = {
    match (x) {
        Some{} -> true,
        _      -> false
    }
}

/*
 * Either
 */
typedef Either<'A,'B> = Left{l: 'A}
                      | Right{r: 'B}

/*
 * String conversion
 */
extern function __builtin_2string(x: 'X): string
extern function hex(x: 'X): string

/*
 * hashing
 */
extern function hash64(x: 'X): bit<64>
extern function hash128(x: 'X): bit<128>

/*
 * Standard aggregates
 */

extern type Group<'A>

extern function count(g: Group<'A>): bit<64>
extern function group2set(g: Group<'A>): Set<'A>
extern function group2vec(g: Group<'A>): Vec<'A>
extern function group2map(g: Group<('K,'V)>): Map<'K,'V>

/*
 * Map
 */

extern type Map<'K,'V>

extern function map_empty(): Map<'K, 'V>
extern function map_singleton(k: 'K, v: 'V): Map<'K, 'V>
extern function map_insert(m: mut Map<'K,'V>, k: 'K, v: 'V): ()
extern function map_get(m: Map<'K,'V>, k:'K): Option<'V>
extern function map_union(m1: Map<'K, 'V>, m2: Map<'K,'V>): Map<'K, 'V>

/*
 * Set
 */

extern type Set<'A>

extern function set_size(s: Set<'X>): bit<64>
extern function set_empty(): Set<'X>
extern function set_insert(s: mut Set<'X>, v: 'X): ()
extern function set_contains(s: Set<'X>, v: 'X): bool
