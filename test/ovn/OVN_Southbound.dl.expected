import types

relation SB_Global (
    nb_cfg: integer,
    external_ids: Map<string,string>,
    connections: Set<uuid>,
    ssl: Set<uuid>
)
relation DeltaPlus_SB_Global (
    nb_cfg: integer,
    external_ids: Map<string,string>,
    connections: Set<uuid>,
    ssl: Set<uuid>
)
DeltaPlus_SB_Global(nb_cfg, external_ids, connections, ssl) :-
    SB_Global(nb_cfg, external_ids, connections, ssl),
    not Realized_SB_Global(_, nb_cfg, external_ids, connections, ssl).
relation DeltaMinus_SB_Global (
    _uuid: uuid
)
input relation Realized_SB_Global (
    _uuid: uuid,
    nb_cfg: integer,
    external_ids: Map<string,string>,
    connections: Set<uuid>,
    ssl: Set<uuid>
)
primary key (x) x._uuid
relation Chassis (
    uuid_name: string,
    name: string,
    hostname: string,
    encaps: Set<uuid>,
    vtep_logical_switches: Set<string>,
    nb_cfg: integer,
    external_ids: Map<string,string>
)
relation UUIDMap_Chassis (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_Chassis(__name, Left{__uuid}) :-
    Chassis(__name, name, hostname, encaps, vtep_logical_switches, nb_cfg, external_ids),
    Realized_Chassis(__uuid, name, hostname, encaps, vtep_logical_switches, nb_cfg, external_ids).
UUIDMap_Chassis(__name, Right{__name}) :-
    Chassis(__name, name, hostname, encaps, vtep_logical_switches, nb_cfg, external_ids),
    Realized_Chassis(_, name, hostname, encaps, vtep_logical_switches, nb_cfg, external_ids).
relation DeltaPlus_Chassis (
    uuid_name: string,
    name: string,
    hostname: string,
    encaps: Set<uuid>,
    vtep_logical_switches: Set<string>,
    nb_cfg: integer,
    external_ids: Map<string,string>
)
DeltaPlus_Chassis(uuid_name, name, hostname, encaps, vtep_logical_switches, nb_cfg, external_ids) :-
    Chassis(uuid_name, name, hostname, encaps, vtep_logical_switches, nb_cfg, external_ids),
    not Realized_Chassis(_, name, hostname, encaps, vtep_logical_switches, nb_cfg, external_ids).
relation DeltaMinus_Chassis (
    _uuid: uuid
)
input relation Realized_Chassis (
    _uuid: uuid,
    name: string,
    hostname: string,
    encaps: Set<uuid>,
    vtep_logical_switches: Set<string>,
    nb_cfg: integer,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
input relation Encap (
    _uuid: uuid,
    __type: string,
    options: Map<string,string>,
    ip: string,
    chassis_name: string
)
primary key (x) x._uuid
relation Address_Set (
    name: string,
    addresses: Set<string>
)
relation DeltaPlus_Address_Set (
    name: string,
    addresses: Set<string>
)
DeltaPlus_Address_Set(name, addresses) :-
    Address_Set(name, addresses),
    not Realized_Address_Set(_, name, addresses).
relation DeltaMinus_Address_Set (
    _uuid: uuid
)
input relation Realized_Address_Set (
    _uuid: uuid,
    name: string,
    addresses: Set<string>
)
primary key (x) x._uuid
input relation Port_Group (
    _uuid: uuid,
    name: string,
    ports: Set<string>
)
primary key (x) x._uuid
relation Logical_Flow (
    logical_datapath: string,
    pipeline: string,
    table_id: integer,
    priority: integer,
    __match: string,
    actions: string,
    external_ids: Map<string,string>
)
relation Swizzled_Logical_Flow (
    logical_datapath: uuid_or_string_t,
    pipeline: string,
    table_id: integer,
    priority: integer,
    __match: string,
    actions: string,
    external_ids: Map<string,string>
)
Swizzled_Logical_Flow(__id_logical_datapath, pipeline, table_id, priority, __match, actions, external_ids) :-
    Logical_Flow(logical_datapath, pipeline, table_id, priority, __match, actions, external_ids),
    UUIDMap_Datapath_Binding(logical_datapath, __id_logical_datapath).
relation DeltaPlus_Logical_Flow (
    logical_datapath: uuid_or_string_t,
    pipeline: string,
    table_id: integer,
    priority: integer,
    __match: string,
    actions: string,
    external_ids: Map<string,string>
)
DeltaPlus_Logical_Flow(logical_datapath, pipeline, table_id, priority, __match, actions, external_ids) :-
    Swizzled_Logical_Flow(logical_datapath, pipeline, table_id, priority, __match, actions, external_ids),
    not Realized_Logical_Flow(_, extract_uuid(logical_datapath), pipeline, table_id, priority, __match, actions, external_ids).
relation DeltaMinus_Logical_Flow (
    _uuid: uuid
)
input relation Realized_Logical_Flow (
    _uuid: uuid,
    logical_datapath: uuid,
    pipeline: string,
    table_id: integer,
    priority: integer,
    __match: string,
    actions: string,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation Multicast_Group (
    datapath: string,
    name: string,
    tunnel_key: integer,
    ports: Set<string>
)
relation Swizzled_Multicast_Group (
    datapath: uuid_or_string_t,
    name: string,
    tunnel_key: integer,
    ports: Set<uuid_or_string_t>
)
Swizzled_Multicast_Group(__id_datapath, name, tunnel_key, __id_ports) :-
    Multicast_Group(datapath, name, tunnel_key, ports),
    UUIDMap_Datapath_Binding(datapath, __id_datapath),
    var __one = FlatMap(ports),
    UUIDMap_Port_Binding(__one, __one_swizzled),
    Aggregate((__id_datapath, name, tunnel_key), __id_ports = group2set(__one_swizzled)).
relation DeltaPlus_Multicast_Group (
    datapath: uuid_or_string_t,
    name: string,
    tunnel_key: integer,
    ports: Set<uuid_or_string_t>
)
DeltaPlus_Multicast_Group(datapath, name, tunnel_key, ports) :-
    Swizzled_Multicast_Group(datapath, name, tunnel_key, ports),
    not Realized_Multicast_Group(_, extract_uuid(datapath), name, _, _).
relation DeltaMinus_Multicast_Group (
    _uuid: uuid
)
relation Update_Multicast_Group (
    _uuid: uuid,
    tunnel_key: option_t<integer>,
    ports: option_t<Set<uuid_or_string_t>>
)
input relation Realized_Multicast_Group (
    _uuid: uuid,
    datapath: uuid,
    name: string,
    tunnel_key: integer,
    ports: Set<uuid>
)
primary key (x) x._uuid
input relation Meter (
    _uuid: uuid,
    name: string,
    unit: string,
    bands: Set<uuid>
)
primary key (x) x._uuid
input relation Meter_Band (
    _uuid: uuid,
    action: string,
    rate: integer,
    burst_size: integer
)
primary key (x) x._uuid
relation Datapath_Binding (
    uuid_name: string,
    tunnel_key: integer,
    external_ids: Map<string,string>
)
relation UUIDMap_Datapath_Binding (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_Datapath_Binding(__name, Left{__uuid}) :-
    Datapath_Binding(__name, tunnel_key, external_ids),
    Realized_Datapath_Binding(__uuid, tunnel_key, external_ids).
UUIDMap_Datapath_Binding(__name, Right{__name}) :-
    Datapath_Binding(__name, tunnel_key, external_ids),
    Realized_Datapath_Binding(_, tunnel_key, external_ids).
relation DeltaPlus_Datapath_Binding (
    uuid_name: string,
    tunnel_key: integer,
    external_ids: Map<string,string>
)
DeltaPlus_Datapath_Binding(uuid_name, tunnel_key, external_ids) :-
    Datapath_Binding(uuid_name, tunnel_key, external_ids),
    not Realized_Datapath_Binding(_, tunnel_key, external_ids).
relation DeltaMinus_Datapath_Binding (
    _uuid: uuid
)
input relation Realized_Datapath_Binding (
    _uuid: uuid,
    tunnel_key: integer,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation Port_Binding (
    uuid_name: string,
    logical_port: string,
    __type: string,
    gateway_chassis: Set<uuid>,
    options: Map<string,string>,
    datapath: string,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<string>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
relation UUIDMap_Port_Binding (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_Port_Binding(__name, Left{__uuid}) :-
    Swizzled_Port_Binding(__name, logical_port, _, _, _, _, _, _, _, _, _, _, _),
    Realized_Port_Binding(__uuid, logical_port, _, _, _, _, _, _, _, _, _, _, _).
UUIDMap_Port_Binding(__name, Right{__name}) :-
    Swizzled_Port_Binding(__name, logical_port, _, _, _, _, _, _, _, _, _, _, _),
    Realized_Port_Binding(_, logical_port, _, _, _, _, _, _, _, _, _, _, _).
relation Swizzled_Port_Binding (
    uuid_name: string,
    logical_port: string,
    __type: string,
    gateway_chassis: Set<uuid>,
    options: Map<string,string>,
    datapath: uuid_or_string_t,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<uuid_or_string_t>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
Swizzled_Port_Binding(uuid_name, logical_port, __type, gateway_chassis, options, __id_datapath, tunnel_key, parent_port, tag, __id_chassis, mac, nat_addresses, external_ids) :-
    Port_Binding(uuid_name, logical_port, __type, gateway_chassis, options, datapath, tunnel_key, parent_port, tag, chassis, mac, nat_addresses, external_ids),
    UUIDMap_Datapath_Binding(datapath, __id_datapath),
    var __one = FlatMap(chassis),
    UUIDMap_Chassis(__one, __one_swizzled),
    Aggregate((uuid_name, logical_port, __type, gateway_chassis, options, __id_datapath, tunnel_key, parent_port, tag, mac, nat_addresses, external_ids), __id_chassis = group2set(__one_swizzled)).
relation DeltaPlus_Port_Binding (
    uuid_name: string,
    logical_port: string,
    __type: string,
    gateway_chassis: Set<uuid>,
    options: Map<string,string>,
    datapath: uuid_or_string_t,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<uuid_or_string_t>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
DeltaPlus_Port_Binding(uuid_name, logical_port, __type, gateway_chassis, options, datapath, tunnel_key, parent_port, tag, chassis, mac, nat_addresses, external_ids) :-
    Swizzled_Port_Binding(uuid_name, logical_port, __type, gateway_chassis, options, datapath, tunnel_key, parent_port, tag, chassis, mac, nat_addresses, external_ids),
    not Realized_Port_Binding(_, logical_port, _, _, _, _, _, _, _, _, _, _, _).
relation DeltaMinus_Port_Binding (
    _uuid: uuid
)
relation Update_Port_Binding (
    _uuid: uuid,
    __type: option_t<string>,
    gateway_chassis: option_t<Set<uuid>>,
    options: option_t<Map<string,string>>,
    datapath: option_t<uuid_or_string_t>,
    tunnel_key: option_t<integer>,
    parent_port: option_t<Set<string>>,
    tag: option_t<Set<integer>>,
    chassis: option_t<Set<uuid_or_string_t>>,
    mac: option_t<Set<string>>,
    nat_addresses: option_t<Set<string>>,
    external_ids: option_t<Map<string,string>>
)
input relation Realized_Port_Binding (
    _uuid: uuid,
    logical_port: string,
    __type: string,
    gateway_chassis: Set<uuid>,
    options: Map<string,string>,
    datapath: uuid,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<uuid>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation MAC_Binding (
    logical_port: string,
    ip: string,
    mac: string,
    datapath: string
)
relation Swizzled_MAC_Binding (
    logical_port: string,
    ip: string,
    mac: string,
    datapath: uuid_or_string_t
)
Swizzled_MAC_Binding(logical_port, ip, mac, __id_datapath) :-
    MAC_Binding(logical_port, ip, mac, datapath),
    UUIDMap_Datapath_Binding(datapath, __id_datapath).
relation DeltaPlus_MAC_Binding (
    logical_port: string,
    ip: string,
    mac: string,
    datapath: uuid_or_string_t
)
DeltaPlus_MAC_Binding(logical_port, ip, mac, datapath) :-
    Swizzled_MAC_Binding(logical_port, ip, mac, datapath),
    not Realized_MAC_Binding(_, logical_port, ip, mac, extract_uuid(datapath)).
relation DeltaMinus_MAC_Binding (
    _uuid: uuid
)
input relation Realized_MAC_Binding (
    _uuid: uuid,
    logical_port: string,
    ip: string,
    mac: string,
    datapath: uuid
)
primary key (x) x._uuid
relation DHCP_Options (
    name: string,
    code: integer,
    __type: string
)
relation DeltaPlus_DHCP_Options (
    name: string,
    code: integer,
    __type: string
)
DeltaPlus_DHCP_Options(name, code, __type) :-
    DHCP_Options(name, code, __type),
    not Realized_DHCP_Options(_, name, code, __type).
relation DeltaMinus_DHCP_Options (
    _uuid: uuid
)
input relation Realized_DHCP_Options (
    _uuid: uuid,
    name: string,
    code: integer,
    __type: string
)
primary key (x) x._uuid
relation DHCPv6_Options (
    name: string,
    code: integer,
    __type: string
)
relation DeltaPlus_DHCPv6_Options (
    name: string,
    code: integer,
    __type: string
)
DeltaPlus_DHCPv6_Options(name, code, __type) :-
    DHCPv6_Options(name, code, __type),
    not Realized_DHCPv6_Options(_, name, code, __type).
relation DeltaMinus_DHCPv6_Options (
    _uuid: uuid
)
input relation Realized_DHCPv6_Options (
    _uuid: uuid,
    name: string,
    code: integer,
    __type: string
)
primary key (x) x._uuid
input relation Connection (
    _uuid: uuid,
    target: string,
    max_backoff: Set<integer>,
    inactivity_probe: Set<integer>,
    read_only: bool,
    role: string,
    other_config: Map<string,string>,
    external_ids: Map<string,string>,
    is_connected: bool,
    status: Map<string,string>
)
primary key (x) x._uuid
input relation SSL (
    _uuid: uuid,
    private_key: string,
    certificate: string,
    ca_cert: string,
    bootstrap_ca_cert: bool,
    ssl_protocols: string,
    ssl_ciphers: string,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation DNS (
    records: Map<string,string>,
    datapaths: Set<string>,
    external_ids: Map<string,string>
)
relation Swizzled_DNS (
    records: Map<string,string>,
    datapaths: Set<uuid_or_string_t>,
    external_ids: Map<string,string>
)
Swizzled_DNS(records, __id_datapaths, external_ids) :-
    DNS(records, datapaths, external_ids),
    var __one = FlatMap(datapaths),
    UUIDMap_Datapath_Binding(__one, __one_swizzled),
    Aggregate((records, external_ids), __id_datapaths = group2set(__one_swizzled)).
relation DeltaPlus_DNS (
    records: Map<string,string>,
    datapaths: Set<uuid_or_string_t>,
    external_ids: Map<string,string>
)
DeltaPlus_DNS(records, datapaths, external_ids) :-
    Swizzled_DNS(records, datapaths, external_ids),
    not Realized_DNS(_, records, _, _).
relation DeltaMinus_DNS (
    _uuid: uuid
)
relation Update_DNS (
    _uuid: uuid,
    datapaths: option_t<Set<uuid_or_string_t>>,
    external_ids: option_t<Map<string,string>>
)
input relation Realized_DNS (
    _uuid: uuid,
    records: Map<string,string>,
    datapaths: Set<uuid>,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation RBAC_Role (
    name: string,
    permissions: Map<string,string>
)
relation Swizzled_RBAC_Role (
    name: string,
    permissions: Map<string,uuid_or_string_t>
)
Swizzled_RBAC_Role(name, __id_permissions) :-
    RBAC_Role(name, permissions),
    var __one = FlatMap(permissions),
    (var __one_key, var __one_ref) = __one,
    UUIDMap_RBAC_Permission(__one_ref, __one_swizzled),
    Aggregate((name), __id_permissions = group2map((__one_key, __one_swizzled))).
relation DeltaPlus_RBAC_Role (
    name: string,
    permissions: Map<string,uuid_or_string_t>
)
DeltaPlus_RBAC_Role(name, permissions) :-
    Swizzled_RBAC_Role(name, permissions),
    not Realized_RBAC_Role(_, name, _).
relation DeltaMinus_RBAC_Role (
    _uuid: uuid
)
relation Update_RBAC_Role (
    _uuid: uuid,
    permissions: option_t<Map<string,uuid_or_string_t>>
)
input relation Realized_RBAC_Role (
    _uuid: uuid,
    name: string,
    permissions: Map<string,uuid>
)
primary key (x) x._uuid
relation RBAC_Permission (
    uuid_name: string,
    table: string,
    authorization: Set<string>,
    insert_delete: bool,
    update: Set<string>
)
relation UUIDMap_RBAC_Permission (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_RBAC_Permission(__name, Left{__uuid}) :-
    RBAC_Permission(__name, table, authorization, insert_delete, update),
    Realized_RBAC_Permission(__uuid, table, authorization, insert_delete, update).
UUIDMap_RBAC_Permission(__name, Right{__name}) :-
    RBAC_Permission(__name, table, authorization, insert_delete, update),
    Realized_RBAC_Permission(_, table, authorization, insert_delete, update).
relation DeltaPlus_RBAC_Permission (
    uuid_name: string,
    table: string,
    authorization: Set<string>,
    insert_delete: bool,
    update: Set<string>
)
DeltaPlus_RBAC_Permission(uuid_name, table, authorization, insert_delete, update) :-
    RBAC_Permission(uuid_name, table, authorization, insert_delete, update),
    not Realized_RBAC_Permission(_, table, authorization, insert_delete, update).
relation DeltaMinus_RBAC_Permission (
    _uuid: uuid
)
input relation Realized_RBAC_Permission (
    _uuid: uuid,
    table: string,
    authorization: Set<string>,
    insert_delete: bool,
    update: Set<string>
)
primary key (x) x._uuid
input relation Gateway_Chassis (
    _uuid: uuid,
    name: string,
    chassis: Set<uuid>,
    priority: integer,
    external_ids: Map<string,string>,
    options: Map<string,string>
)
primary key (x) x._uuid